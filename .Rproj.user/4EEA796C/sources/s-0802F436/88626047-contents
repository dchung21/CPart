#include <Rcpp.h>
#include <vector>
#include <limits>
#include <queue>
#include "Leaf.h"
#include "Rule.h"
#include "DecisionNode.h"
#include "util.h"

class Node; 

class DecisionTree {
    private:
        Node* root;
        Rcpp::StringVector colNames;
        std::string target;
        unsigned int rowThreshold;
        float sumThreshold;
        float threshold;
        Rcpp::NumericVector vec;

        Node* buildTree(const Rcpp::DataFrame& df, const std::vector<int> rows) {
            // if we have reached a row threshold we're done building thre tree
            if (rows.size() <= threshold)
                return new Leaf(vec, rows);

            // else we have to find the best split first
            Rule* r;
            Rule* rule;
            const int n = rows.size();

            for (const auto& col : colNames) {
                std::string colName = Rcpp::as<std::string>(col);
                Rcpp::NumericVector dfcol = df[colName];
                r = buildTreeHelper(dfcol, rows, colName);

                if (r->getSSE() < rule->getSSE())
                    rule = r;

                else 
                    delete r;
            }

            // at this stage we have found the rule that minimizes sse
            // now we partition the rows
            std::vector<int> trueRows;
            std::vector<int> falseRows;

            for (const auto& i : rows) {
                if (rule->match(rows[i]))
                    trueRows.push_back(i);
                else
                    falseRows.push_back(i);
            }

            DecisionNode* node = new DecisionNode(rule);
            node->trueEdge = buildTree(df, trueRows);
            node->falseEdge = buildTree(df, falseRows); 

            return node;
        }

        // find optimal rule by minimizing sum of squared errors
        Rule* buildTreeHelper(const Rcpp::NumericVector& vec, const std::vector<int>& rows, const std::string& col) {
            Rule* r;
            Rule* rule;
            Rcpp::NumericVector sortedVec = clone(vec);
            std::sort(sortedVec.begin(), sortedVec.end());
            unsigned int nRows = rows.size();
            float minSSE = std::numeric_limits<float>::infinity();

            for (int i = 0; i < nRows-1; i++) {
                // take average of two data points
                float avg = (sortedVec[rows[i]] + sortedVec[rows[i+1]]) / 2;
                r = new Rule(col, avg);

                float trueMean = 0;
                float falseMean = 0;

                std::vector<int> trueRows, falseRows;
                for (unsigned int i = 0; i < nRows; i++) {
                    float val = vec[rows[i]];
                    if (r->match(val)) {
                        trueRows.push_back(rows[i]);
                        trueMean += val;
                    }

                    else {
                        falseRows.push_back(rows[i]);
                        falseMean += val;
                    }
                }

                trueMean /= trueRows.size();
                falseMean /= falseRows.size();

                float sumSE = sse(vec, trueRows, falseRows, trueMean, falseMean);

                rule = new Rule();
                if (sumSE < minSSE) {
                    minSSE = sumSE;    
                    delete rule;
                    rule = r;
                }

                else {
                    delete r;
                }
                
            }

            return rule;
        }


    public:
        DecisionTree(const Rcpp::DataFrame& df, std::string target) {
            std::cout << "building decision tree" << std::endl;
            this->target = target;


            int n = df.nrows();
            std::cout << n << std::endl;
            std::vector<int> rows (n);
            for (int i = 0; i < n; i++)
                rows[i] = i;

            this->threshold = 10;

            Rcpp::CharacterVector tCols = df.names();
            // remove the target var from colnames

            /*
            short n = colNames.size();
            for (int i = 0; i < n; i++) {
                std::string colName = Rcpp::as<std::string>(df.names()[i]);
                std::cout << colName << std::endl;
                if (colName != target)
                    this->colNames.push_back(colName);
            }
            */

            /*
            for (const auto& col : tCols) {
                if (col != target)
                    this->colNames.push_back(col);
                std::cout << col << std::endl;
            }


            this->vec = df[this->target];
            std::cout << "hello" << std::endl;
            */
            //root = buildTree(df, rows);

        }

        // bfs to delete all the nodes
        ~DecisionTree() {
            Node* ptr = root;

            std::queue<Node*> q;
            q.push(ptr);
            while (!q.empty()) {
                Node* front = q.front();
                q.pop();
                if (front->trueEdge)
                    q.push(front->trueEdge);
                if (front->falseEdge)
                    q.push(front->falseEdge);

                delete front;
            }
        }
};
